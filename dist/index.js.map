{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/factory.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar sinpi = require( '@stdlib/math-base-special-sinpi' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar PI = require( '@stdlib/constants-float64-pi' );\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {number} evaluated logCDF\n*\n* @example\n* var y = logcdf( 0.5, 0.0, 1.0 );\n* // returns ~-0.095\n*\n* @example\n* var y = logcdf( 1.2, 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = logcdf( -0.9, 0.0, 1.0 );\n* // returns ~-7.108\n*\n* @example\n* var y = logcdf( 2.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 2.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*/\nfunction logcdf( x, mu, s ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn ( x < mu ) ? NINF : 0.0;\n\t}\n\tif ( x < mu - s ) {\n\t\treturn NINF;\n\t}\n\tif ( x > mu + s ) {\n\t\treturn 0.0;\n\t}\n\tz = ( x - mu ) / s;\n\treturn ln( ( 1.0 + z + ( sinpi( z ) / PI ) ) / 2.0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = logcdf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar degenerate = require( '@stdlib/stats-base-dists-degenerate-logcdf' ).factory;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar sinpi = require( '@stdlib/math-base-special-sinpi' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar PI = require( '@stdlib/constants-float64-pi' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s`.\n*\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {Function} logCDF\n*\n* @example\n* var logcdf = factory( 3.0, 1.5 );\n*\n* var y = logcdf( 1.9 );\n* // returns ~-4.2\n*\n* y = logcdf( 4.0 );\n* // returns ~-0.029\n*/\nfunction factory( mu, s ) {\n\tif ( isnan( mu ) || isnan( s ) || s < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn degenerate( mu );\n\t}\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a raised cosine distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logCDF\n\t*\n\t* @example\n\t* var y = logcdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < mu - s ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tif ( x > mu + s ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tz = ( x - mu ) / s;\n\t\treturn ln( ( 1.0 + z + ( sinpi( z ) / PI ) ) / 2.0 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of cumulative distribution function (CDF) for a raised cosine distribution.\n*\n* @module @stdlib/stats-base-dists-cosine-logcdf\n*\n* @example\n* var logcdf = require( '@stdlib/stats-base-dists-cosine-logcdf' );\n*\n* var y = logcdf( 0.5, 0.0, 1.0 );\n* // returns ~-0.095\n*\n* var mylogcdf = logcdf.factory( 3.0, 1.5 );\n*\n* y = mylogcdf( 4.0 );\n* // returns ~-0.029\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,EAAQ,QAAS,iCAAkC,EACnDC,EAAK,QAAS,8BAA+B,EAC7CC,EAAO,QAAS,gCAAiC,EACjDC,EAAK,QAAS,8BAA+B,EAqCjD,SAASC,EAAQC,EAAGC,EAAIC,EAAI,CAC3B,IAAIC,EACJ,OACCT,EAAOM,CAAE,GACTN,EAAOO,CAAG,GACVP,EAAOQ,CAAE,GACTA,EAAI,EAEG,IAEHA,IAAM,EACDF,EAAIC,EAAOJ,EAAO,EAEvBG,EAAIC,EAAKC,EACNL,EAEHG,EAAIC,EAAKC,EACN,GAERC,GAAMH,EAAIC,GAAOC,EACVN,GAAM,EAAMO,EAAMR,EAAOQ,CAAE,EAAIL,GAAS,CAAI,EACpD,CAKAL,EAAO,QAAUM,ICzFjB,IAAAK,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,iCAAkC,EAC9DC,EAAa,QAAS,4CAA6C,EAAE,QACrEC,EAAQ,QAAS,iCAAkC,EACnDC,EAAQ,QAAS,iCAAkC,EACnDC,EAAK,QAAS,8BAA+B,EAC7CC,EAAO,QAAS,gCAAiC,EACjDC,EAAK,QAAS,8BAA+B,EAqBjD,SAASC,EAASC,EAAIC,EAAI,CACzB,GAAKP,EAAOM,CAAG,GAAKN,EAAOO,CAAE,GAAKA,EAAI,EACrC,OAAOT,EAAkB,GAAI,EAE9B,GAAKS,IAAM,EACV,OAAOR,EAAYO,CAAG,EAEvB,OAAOE,EAaP,SAASA,EAAQC,EAAI,CACpB,IAAIC,EACJ,OAAKV,EAAOS,CAAE,EACN,IAEHA,EAAIH,EAAKC,EACNJ,EAEHM,EAAIH,EAAKC,EACN,GAERG,GAAMD,EAAIH,GAAOC,EACVL,GAAM,EAAMQ,EAAMT,EAAOS,CAAE,EAAIN,GAAS,CAAI,EACpD,CACD,CAKAP,EAAO,QAAUQ,ICjDjB,IAAIM,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAU,IAKdF,EAAaC,EAAM,UAAWC,CAAQ,EAKtC,OAAO,QAAUD",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isnan", "sinpi", "ln", "NINF", "PI", "logcdf", "x", "mu", "s", "z", "require_factory", "__commonJSMin", "exports", "module", "constantFunction", "degenerate", "isnan", "sinpi", "ln", "NINF", "PI", "factory", "mu", "s", "logcdf", "x", "z", "setReadOnly", "main", "factory"]
}
